<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:resources.properties"/>

    <!-- 扫描注解Bean -->
    <context:component-scan base-package="com.hplatform">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true"/>


    <!-- 数据源 -->
    <!--see https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE-->
    <bean id="mybatisdataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${connection.url}"/>
        <property name="username" value="${connection.username}"/>
        <property name="password" value="${connection.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />

    </bean>
	<!-- Mybatis's sqlSessionFactory config -->
	<bean id="sqlSessionFactory" class="com.hplatform.core.common.mybatis.TypeAliasesMatchSqlSessionFactory">
		<property name="dataSource" ref="mybatisdataSource"></property>
		<property name="typeAliasesPackage" value="com.hplatform.**.entity"/>
		<property name="typeAliasesSuperType" value="com.hplatform.core.entity.BaseEntity"/>
		<property name="mapperLocations">
			<array>
				<value>classpath:/mapper/**/*.xml</value>
			</array>
		</property>
		<property name="configLocation" value="classpath:mybatis-mysql-config.xml"/>	
	</bean>
	
	<bean name="mybatisTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mybatisdataSource"></property>
	</bean>
	<!-- 启用事务 -->
	<tx:advice id="mybatisTxAdvice" transaction-manager="mybatisTransactionManager">
		<tx:attributes>
		  <tx:method name="reset*" rollback-for="com.hplatform.core.exception,Exception" />
		  <tx:method name="gen*" rollback-for="com.hplatform.core.exception,Exception" />
		  <tx:method name="save*" rollback-for="com.hplatform.core.exception,Exception" />
		  <tx:method name="edit*" rollback-for="com.hplatform.core.exception,Exception" />
		  <tx:method name="insert*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="create*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="*Add*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="add*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="register*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="check*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="copy*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="update*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="lock*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="delete*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="*Delete*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="move*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="*Move*" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="find*" read-only="true" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="list*" read-only="true" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="is*" read-only="true" rollback-for="com.hplatform.core.exception,Exception" />
	      <tx:method name="*" read-only="true" rollback-for="com.hplatform.core.exception,Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP代理设置 -->
	<aop:config>
    <aop:advisor pointcut="execution(* com.hplatform.*.service..*.*(..))" advice-ref="mybatisTxAdvice" />
	</aop:config>

	<!-- scan  mappers and let them be autowired -->
	<bean class="com.hplatform.core.common.mybatis.BasePackageMapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>   
		<property name="basePackage" value="com.hplatform.**.mapper" />
		<property name="annotationClass" value="com.hplatform.core.common.annotation.MyBatisMapper"/>
	</bean>
    <!-- <bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="dataSource"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSourceProxy"/>
    </bean>

    事务管理器配置
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceProxy"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <aop:config expose-proxy="true" proxy-target-class="true">
        只对业务逻辑层实施事务
        <aop:pointcut id="txPointcut" expression="execution(* com.hplatform.core..service..*+.*(..))"/>
        <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config> -->

    <bean class="com.hplatform.core.common.spring.SpringUtils"/>

    <!-- <import resource="classpath:spring-config-cache.xml"/>
    <import resource="classpath:spring-config-shiro.xml"/>
    <import resource="classpath:spring-config-quartz.xml"/> -->
    <bean class="com.hplatform.core.common.mybatis.MybatisDynamicLoader"></bean>
</beans>